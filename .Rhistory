testmatrix <- matrix(c(10,12,5,7,3,2,2,8,5), nrow=3, ncol=3)
testmatrix
cacheSolve(makeCacheMatrix(testmatrix))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(makeCacheMatrix(testmatrix))
testx <- 2
solve(testx)
makeCacheMatrix(testmatrix)
testCache <- makeCacheMatrix(testmatrix)
testCache
textmatrix <- matrix(c(1:9))
textmatrix
textmatrix <- (matrix(c(1:9)), nrow=3, ncol=3)
textmatrix <- (matrix(c(1:9), nrow=3, ncol=3)
)
textmatrix
solve(textmatrix)
makeCacheMatrix(textmatrix)
cacheSolve(textmatrix)
cacheSolve(makeCacheMatrix(textmatrix))
a <- diag(5,3)
a
CachedMarix <- makeCacheMatrix(a)
cacheSolve(CachedMarix)
testm <- diag (5,3)
testm
makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
achedMatrix <- makeCacheMatrix(testm)
cacheSolve(CachedMatrix)
testm <- diag(5,3)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
CachedMatrix <- makeCacheMatrix(testm)
cacheSolve(CachedMatrix)
